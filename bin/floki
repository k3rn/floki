#!/usr/bin/env python
import vmfusion
import argparse
import yaml
import sys


def parse_arguments():

    parser = argparse.ArgumentParser(
        prog='floki',
        description='Floki',
        add_help=True
    )

    parser.add_argument('--config', '-c', dest='config', default='config.yml',
                        help="Use a diferent configuration file",)

    subparser = parser.add_subparsers(title='subcommands', dest='action')

    start = subparser.add_parser('start', help='Start the VMs')
    start.add_argument('env', metavar='enviroment',
                       help='Which enviroment to start')
    start.add_argument('-g', '--group', nargs='*', dest='groups',
                       help='Which groups of machines to start')

    stop = subparser.add_parser('stop', help='Stop the VMs')
    stop.add_argument('env', metavar='enviroment',
                      help='Which enviroment to stop')
    stop.add_argument('-g', '--group', nargs='*', dest='groups',
                      help='Which groups of machines to start')

    restart = subparser.add_parser('restart', help='Restart the VMs')
    restart.add_argument('env', metavar='enviroment',
                         help='Which enviroment to restart')
    restart.add_argument('-g', '--group', nargs='*', dest='groups',
                         help='Which groups of machines to start')

    status = subparser.add_parser('status', help='List the running VMs')
    status.add_argument('env', metavar='enviroment',
                        help='Which enviroment to list')
    status.add_argument('-g', '--group', nargs='*', dest='groups',
                        help='Which groups of machines to start')

    create = subparser.add_parser('create', help='Create the VMs')
    create.add_argument('env', metavar='enviroment',
                        help='Which enviroment to create')
    create.add_argument('-g', '--group', nargs='*', dest='groups',
                        help='Which groups of machines to start')

    args = parser.parse_args()

    return args


class Machines:

    def __init__(self, config):
        self.load_config(config)

    def load_config(self, path):
        try:
            self.config = yaml.load(file(path, 'r'))
        except IOError, e:
            print str(e)

        self.vmrun = vmfusion.vmrun_cli()

    def vmx_path(self, env, group, name):
        machine = self.config[1]['machines'][env][group][name]

        if type(machine) is dict and 'path' in machine:
            path = machine['path']
        else:
            path = "".join(self.config[0]['project']['dir'] + '/' +
                           self.config[0]['project']['name'] + '/' + env +
                           '+' + group + '/' + name + '.vmwarevm/' + name +
                           '.vmx')

        return path

    def get_list(self, env, groups):

        list = dict()

        if groups[0] is 'all':
            groups = self.config[1]['machines'][env].keys()

        for group in groups:
            try:
                for name in self.config[1]['machines'][env][group]:
                    list[name] = self.vmx_path(env, group,  name)

            except KeyError:
                if env not in self.config[1]['machines']:
                    print "ERROR: Enviroment %s doesn't exist" % env
                else:
                    print "ERROR: Group %s doesn't exist" % group

        if any(list):
            return list
        else:
            sys.exit(1)

    def get_list_running(self, env, groups):
        running_list = dict()
        for running in self.vmrun.list()['machines']:
            for name in self.get_list(env, groups):
                if running == self.get_list(env, groups)[name]:
                    running_list[name] = running

        return running_list

    def start(self, env, groups):
        machinelist = self.get_list(env, groups)
        for machine in machinelist:
            try:
                print "Starting %s:" % machine,
                self.vmrun.start(machinelist[machine], False)
                print "ok"
            except ValueError, e:
                print "ERROR: %s" % str(e)

    def stop(self, env, groups):
        for machine in self.get_list_running(env, groups):
            try:
                print "Stoping %s" % machine,
                self.vmrun.stop(machine, False)
                print "ok."
            finally:
                print "failed."

    def restart(self, name, path):
        pass

    def suspend(self, name, path):
        pass

    def status(self, env, group):
        running_list = self.get_list_running(env, group)
        print "Machines running:"
        for machine in running_list:
            print machine
        print "Total: %s machine(s) running" % len(running_list)
        print group

    def create(self, env):
        pass

if __name__ == '__main__':
    args = parse_arguments()
    machines = Machines(args.config)

    if args.groups is None:
        args.groups = ['all']

    if args.action == 'start':
        machines.start(args.env, args.groups)
    elif args.action == 'stop':
        machines.stop(args.env, args.groups)
    elif args.action == 'restart':
        machines.restart(args.env, args.groups)
    elif args.action == 'suspend':
        machines.suspend(args.env, args.groups)
    elif args.action == 'status':
        machines.status(args.env, args.groups)
    elif args.action == 'create':
        machines.create(args.env, args.groups)

    else:
        args.print_help()
        sys.exit(1)

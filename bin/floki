#!/usr/bin/env python
import argparse
from floki.machines import Machines


def parse_arguments():

    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument('env', metavar='enviroment')
    parent_parser.add_argument('-g', '--group', nargs='*', dest='groups',
                               default=['all'])
    parent_parser.add_argument('-s', '--single', dest='single')

    parser = argparse.ArgumentParser(
        prog='floki',
        description='Floki',
        add_help=True
    )

    parser.add_argument('--config', '-c', dest='config', default='floki.yml',
                        help="Use a diferent configuration file",)
    subparser = parser.add_subparsers(title='subcommands', dest='action')

    start = subparser.add_parser('start', parents=[parent_parser],
                                 help='Start the VMs')
    stop = subparser.add_parser('stop', parents=[parent_parser],
                                help='Stop the VMs')
    restart = subparser.add_parser('restart', parents=[parent_parser],
                                   help='Restart the VMs')
    status = subparser.add_parser('status', parents=[parent_parser],
                                  help='List the running VMs')
    create = subparser.add_parser('create', parents=[parent_parser],
                                  help='Create the VMs')

    args = parser.parse_args()

    return args

if __name__ == '__main__':
    args = parse_arguments()
    machines = Machines(args.config)

    if args.action == 'start':
        machines.start(args.env, args.groups, args.single)
    elif args.action == 'stop':
        machines.stop(args.env, args.groups, args.single)
    elif args.action == 'restart':
        machines.restart(args.env, args.groups, args.single)
    elif args.action == 'suspend':
        machines.suspend(args.env, args.groups, args.single)
    elif args.action == 'status':
        machines.status(args.env, args.groups, args.single)
    elif args.action == 'create':
        machines.create(args.env, args.groups, args.single)

    else:
        args.print_help()
        sys.exit(1)

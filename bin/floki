#!/usr/bin/env python
import vmfusion
import argparse
import yaml
import sys


def parse_arguments():

    parser = argparse.ArgumentParser(
        prog='floki',
        description='Floki',
        add_help=True
    )

    parser.add_argument('--config', '-c',
                        help="Use a diferent configuration file")

    subparser = parser.add_subparsers(title='subcommands', dest='action')

    subparser.add_parser('start', help='Start the VMs').add_argument(
        'env', metavar='enviroment',  help='Which enviroment to start')
    subparser.add_parser('stop', help='Stop the VMs').add_argument(
        'env', metavar='enviroment',  help='Which enviroment to stop')
    subparser.add_parser('restart', help='Restart the VMs').add_argument(
        'env', metavar='enviroment',  help='Which enviroment to restart')
    subparser.add_parser('status', help='List the running VMs').add_argument(
        'env', metavar='enviroment',  help='Which enviroment to list')
    subparser.add_parser('create', help='Create the VMs').add_argument(
        'env', metavar='enviroment',  help='Which enviroment to create')

    args = parser.parse_args()

    return args


class Machines:

    def __init__(self, config='config.yml'):
        self.loadconfig(config)

    def loadconfig(self, path):
        try:
            self.config = yaml.load(file(path, 'r'))
        except IOError, e:
            print str(e)

        self.vmrun = vmfusion.vmrun_cli()

    def vmx_path(self, env, name):
        machine = self.config[1]['machines'][env][name]

        if type(machine) is dict and 'path' in machine:
            path = machine['path']
        else:
            path = "".join(self.config[0]['project']['dir'] + '/' +
                           self.config[0]['project']['name'] + '/' + env +
                           '/' + name + '.vmwarevm/' + name + '.vmx')

        return path

    def get_list(self, env='development'):

        list = dict()

        try:
            for name in self.config[1]['machines'][env]:
                list[name] = self.vmx_path(env, name)

        except KeyError:
            print "ERROR: Enviroment %s doesn't exist" % env
            sys.exit(1)
        return list

    def get_list_running(self, env):
        running_list = []
        for running in self.vmrun.list()['machines']:
            for name in self.get_list():
                if running == self.get_list()[name]:
                    running_list.append(running)

        return running_list

    def start(self, env):
        machinelist = self.get_list(env)
        for machine in machinelist:
            try:
                self.vmrun.start(machinelist[machine], False)
            except ValueError, e:
                print str(e)

    def stop(self, name, path):
        pass

    def restart(self, name, path):
        pass

    def suspend(self, name, path):
        pass

    def status(self, env):
        for machine in self.get_list_running(env):
            print machine
        print "Total: %s machine(s) running" % len(self.get_list_running(env))

    def create(self, env):
        pass

if __name__ == '__main__':
    args = parse_arguments()
    machines = Machines()

    if args.action == 'start':
        machines.start(args.env)
    elif args.action == 'stop':
        machines.stop(args.env)
    elif args.action == 'restart':
        machines.restart(args.env)
    elif args.action == 'suspend':
        machines.suspend(args.env)
    elif args.action == 'status':
        machines.status(args.env)
    elif args.action == 'create':
        machines.create(args.env)

    else:
        args.print_help()
        sys.exit(1)

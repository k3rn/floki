#!/usr/bin/env python
import argparse
from floki.machines import Machines
try:
    from pudb import set_trace
except ImportError:
    pudb_present = True


def parse_arguments():

    parser = argparse.ArgumentParser(
        prog='floki',
        description='Floki',
        add_help=True
    )

    parser.add_argument('--config', '-c', dest='config', default='config.yml',
                        help="Use a diferent configuration file",)
    parser.add_argument('--debug', '-d', action='store_true', default=False,
                        dest='debug', help='Debug the program with pudb')
    subparser = parser.add_subparsers(title='subcommands', dest='action')

    start = subparser.add_parser('start', help='Start the VMs')
    start.add_argument('env', metavar='enviroment',
                       help='Which enviroment to start')
    start.add_argument('-g', '--group', nargs='*', dest='groups',
                       default=['all'],
                       help='Which groups of machines to start')

    stop = subparser.add_parser('stop', help='Stop the VMs')
    stop.add_argument('env', metavar='enviroment',
                      help='Which enviroment to stop')
    stop.add_argument('-g', '--group', nargs='*', dest='groups',
                      default=['all'],
                      help='Which groups of machines to start')

    restart = subparser.add_parser('restart', help='Restart the VMs')
    restart.add_argument('env', metavar='enviroment',
                         help='Which enviroment to restart')
    restart.add_argument('-g', '--group', nargs='*', dest='groups',
                         default=['all'],
                         help='Which groups of machines to start')

    status = subparser.add_parser('status', help='List the running VMs')
    status.add_argument('env', metavar='enviroment',
                        help='Which enviroment to list')
    status.add_argument('-g', '--group', nargs='*', dest='groups',
                        default=['all'], type=list,
                        help='Which groups of machines to start')

    create = subparser.add_parser('create', help='Create the VMs')
    create.add_argument('env', metavar='enviroment',
                        help='Which enviroment to create')
    create.add_argument('-g', '--group', nargs='*', dest='groups',
                        default=['all'],
                        help='Which groups of machines to start')

    args = parser.parse_args()

    return args

if __name__ == '__main__':
    args = parse_arguments()
    machines = Machines(args.config)
    if args.debug:
        if not pudb_present:
            set_trace()
        else:
            print "Please install pudb to debug."

    if args.action == 'start':
        machines.start(args.env, args.groups)
    elif args.action == 'stop':
        machines.stop(args.env, args.groups)
    elif args.action == 'restart':
        machines.restart(args.env, args.groups)
    elif args.action == 'suspend':
        machines.suspend(args.env, args.groups)
    elif args.action == 'status':
        machines.status(args.env, args.groups)
    elif args.action == 'create':
        machines.create(args.env, args.groups)

    else:
        args.print_help()
        sys.exit(1)
